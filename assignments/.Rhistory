library(rvest)
library(dplyr)
library(tidyverse)
library(stringr)
if (!requireNamespace("rvest", quietly = TRUE)) {
install.packages("rvest")
link1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
page <- read_html(link1)
name <- page %>% html_nodes(".ipc-title-link-wrapper") %>% html_text()
name
print(name)
name
link1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
page <- read_html(link1)
name <- page %>% html_nodes("//a//h3") %>% html_text()
name
name
link1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
page <- read_html(link1)
movie_name <- page %>% html_nodes("//a//h3") %>% html_text()
movie_name
print(movie_name)
library(dplyr)
library(rvest)
library(stringr)
library(tidyverse)
# Replace "yourfile.txt" with the actual file name and path
file_path <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Open the file for writing
file_conn <- tryCatch(
file(file_path, "wt"),
error = function(e) {
cat("Error: Unable to open the file.\n")
stop(e)
}
)
# Your code to write to the file goes here
# Close the file connection when done
close(file_conn)
```
library(tidyverse)
detach("package:readr", unload = TRUE)
library(rvest)
library(stringr)
library(knitr)
library(lubridate)
library(knitr)
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
## Creating the Movies Data Frame {toc-text="nd Section"}
suppressPackageStartupMessages(library(tidyverse))
library(tidyverse)
detach("package:readr", unload = TRUE)
print(url1)
print(colnames)
print(movies)
print(movies)
link = "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
page = read_html(link)
name = page %>% html_nodes
link = "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
page = read_html(link)
name = page %>% html_nodes
library(rvest)
library(dplyr)
library(tidyverse)
library(stringr)
url1 = "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
title1 <- read_html(url1) %>%
html_elements(".ipc-title__text") %>%
html_text()
title1 <- tail(head(title1,-1),-1)
title1 <- str_split(title1, " ", n=2)
title1 <- unlist(lapply(title1, function(x) {x[2]}))
print(title1)
url1 = "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
title1 <- read_html(url1) %>%
html_elements(".ipc-title__text") %>%
html_text()
title1 <- tail(head(title1,-1),-1)
title1 <- str_split(title1, " ", n=2)
title1 <- unlist(lapply(title1, function(x) {x[2]}))
print(title1)
year1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(1)") %>%
html_text() %>%
as.numeric()
duration1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(2)") %>%
html_text()
duration1 <- unlist(lapply(duration1, convert_time))
print(movies)
print(movies)
print(votes1)
print(title1)
print(year1)
print(duration1)
print(votes1)
# Extract votes using rvest
votes1 <- read_html(url1) %>%
html_elements(".kRnqtn") %>%
html_text()
# Clean up the extracted text and convert to numeric
votes1 <- as.numeric(gsub("[^0-9]", "", votes1))
# Print or inspect the resulting numeric vector
print(votes1)
print(votes1)
# Extract rating using rvest
rating1 <- read_html(url1) %>%
html_elements(".ratingGroup--imdb-rating") %>%
html_text()
# Extract numeric ratings using str_extract and handle potential NAs
rating1 <- as.numeric(str_extract(rating1, "\\d+\\.\\d+"))
print(rating1)
print(movie_list)
movie_list <- data.frame(
title = title1,
year = year1,
duration = duration1,
rating = rating1,
votes = votes1
print(movie_list)
movie_list <- data.frame(
title = title1,
year = year1,
duration = duration1,
rating = rating1,
votes = votes1,
)
# Check the length of all vectors
if (length(title1) == length(year1) &&
length(title1) == length(duration1) &&
length(title1) == length(rating1) &&
length(title1) == length(votes1)) {
# Create a data frame
movie_list <- data.frame(
title = title1,
year = year1,
duration = duration1,
rating = rating1,
votes = votes1
)
# Print or inspect the resulting data frame
print(movie_list)
} else {
# Print an error message if vectors have different lengths
print("Error: Vectors have different lengths.")
}
library(rvest)
library(dplyr)
library(tidyverse)
library(stringr)
url1 = "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
title1 <- read_html(url1) %>%
html_elements(".ipc-title__text") %>%
html_text()
title1 <- tail(head(title1,-1),-1)
title1 <- str_split(title1, " ", n=2)
title1 <- unlist(lapply(title1, function(x) {x[2]}))
print(title1)
year1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(1)") %>%
html_text() %>%
as.numeric()
duration1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(2)") %>%
html_text()
duration1 <- unlist(lapply(duration1, convert_time))
View(movie_list)
# Extract and convert duration using rvest
duration1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(2)") %>%
html_text() %>%
lapply(convert_time) %>%
unlist()
duration1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(2)") %>%
html_text()
duration1 <- unlist(lapply(duration1, convert_time))
print(duration1)
library(rvest)
library(dplyr)
library(tidyverse)
library(stringr)
url1 = "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
title1 <- read_html(url1) %>%
html_elements(".ipc-title__text") %>%
html_text()
title1 <- tail(head(title1,-1),-1)
title1 <- str_split(title1, " ", n=2)
title1 <- unlist(lapply(title1, function(x) {x[2]}))
print(title1)
year1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(1)") %>%
html_text() %>%
as.numeric()
duration1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(2)") %>%
html_text()
duration1 <- unlist(lapply(duration1, convert_time))
print(duration1)
print(movie_list)
print(movie_list)
print(movie_list)
# our first url
url1 = "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# scraping the movie titles
title1 <- read_html(url1) %>%
html_elements(".ipc-title__text") %>%
html_text()
title1 <- tail(head(title1,-1),-1)
title1 <- str_split(title1, " ", n=2)
title1 <- unlist(lapply(title1, function(x) {x[2]}))
print(title1)
year1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(1)") %>%
html_text() %>%
as.numeric()
duration1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(2)") %>%
html_text()
duration1 <- unlist(lapply(duration1, convert_time))
duration1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(2)") %>%
html_text() %>%
sapply(convert_time)
duration1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(2)") %>%
html_text() %>%
sapply(convert_time)
print(duration1)
duration1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(2)") %>%
html_text()
print(duration1)
# our first url
url1 = "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# scraping the movie titles
title1 <- read_html(url1) %>%
html_elements(".ipc-title__text") %>%
html_text()
title1 <- tail(head(title1,-1),-1)
title1 <- str_split(title1, " ", n=2)
title1 <- unlist(lapply(title1, function(x) {x[2]}))
print(title1)
year1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(1)") %>%
html_text() %>%
as.numeric()
duration1 <- read_html(url1) %>%
html_elements(".dli-title-metadata-item:nth-child(2)") %>%
html_text()
# scraping rating
rating1 <- read_html(url1) %>%
html_elements(".ratingGroup--imdb-rating") %>%
html_text()
# I struggled something here so i searched and find a solution. This code somehow is making sure that there are no NAs to stopping us even if there are any. (If the code is working, do not touch, right? :))
rating1 <- as.numeric(str_extract(rating1, "\\d+\\.\\d+"))
# scraping votes
votes1 <- read_html(url1) %>%
html_elements(".kRnqtn") %>%
html_text()
#  scrapped  text and converting it to numeric
votes1 <- as.numeric(gsub("[^0-9]", "", votes1))
# Checking the length of all vectors
if (length(title1) == length(year1) &&
length(title1) == length(duration1) &&
length(title1) == length(rating1) &&
length(title1) == length(votes1)) {
# Finally we are creating our data frame to see if it works
movie_list <- data.frame(
title = title1,
year = year1,
duration = duration1,
rating = rating1,
votes = votes1
)
# Here is the list of all movies between 2010-2023
print(movie_list)
} else {
# if vector lengths did not become same
print("Error: Vectors have different lengths.")
}
```
library(ggplot2)
library(ggplot2)
ggplot(movie_list, aes(x = 1:nrow(movie_list), y = rating)) +
geom_point() +
labs(title = "Scatter Plot of Rating for 249 Movies",
x = "Movies",
y = "Rating")
ggplot(movie_list, aes(x = rating)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Ratings for 249 Movies",
x = "Rating",
y = "Frequency")
ggplot(movie_list, aes(x = rating)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black", alpha = 0.7) +
scale_x_continuous(breaks = seq(1, 10, 1)) +
labs(title = "Distribution of Ratings for 249 Movies",
x = "Rating",
y = "Frequency")
movie_list_descending <- movie_list %>% arrange(desc(rating))
print(movie_list_descending)
rating_avg <- movie_list %>%
group_by(year) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE),
num_movies = n())
# scatter plot
ggplot(rating_avg, aes(x = year, y = avg_rating, size = num_movies)) +
geom_point() +
labs(title = "Yearly Rating Averages and Number of Movies",
x = "Year",
y = "Average Rating",
size = "Number of Movies")
ggplot(rating_avg, aes(x = year, y = num_movies)) +
geom_point() +
labs(title = "Number of Movies Over the Years",
x = "Year",
y = "Number of Movies")
ggplot(movie_list, aes(x = as.factor(year), y = rating)) +
geom_boxplot() +
labs(title = "Box Plots of Ratings Over the Years",
x = "Year",
y = "Rating")
ggplot(rating_avg, aes(x = year, y = num_movies)) +
geom_point() +
labs(title = "Number of Movies Over the Years",
x = "Year",
y = "Number of Movies")
ggplot(rating_avg, aes(x = year, y = avg_rating, size = num_movies)) +
geom_point() +
labs(title = "Yearly Rating Averages and Number of Movies",
x = "Year",
y = "Average Rating",
size = "Number of Movies")
rating_avg <- movie_list %>%
group_by(year) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE),
num_movies = n())
# scatter plot
ggplot(rating_avg, aes(x = year, y = avg_rating, size = num_movies)) +
geom_point() +
labs(title = "Yearly Rating Averages and Number of Movies",
x = "Year",
y = "Average Rating",
size = "Number of Movies")
# plot number of movies over the years
ggplot(rating_avg, aes(x = year, y = num_movies)) +
geom_point() +
labs(title = "Number of Movies Over the Years",
x = "Year",
y = "Number of Movies")
# box plots of ratings over the years
ggplot(movie_list, aes(x = as.factor(year), y = rating)) +
geom_boxplot() +
labs(title = "Box Plots of Ratings Over the Years",
x = "Year",
y = "Rating")
# Assuming your dataset is named movie_list
# Calculate correlation between Votes and Ratings
correlation <- cor(movie_list$votes, movie_list$rating, use = "complete.obs")
# Print or inspect the correlation coefficient
print(correlation)
correlation_duration_rating <- cor(movie_list$duration, movie_list$rating, use = "complete.obs")
convert_duration <- function(duration) {
parts <- strsplit(duration, "h|m")
hours <- as.numeric(parts[[1]][1])
minutes <- as.numeric(parts[[1]][2])
total_minutes <- hours * 60 + minutes
return(total_minutes)
}
movie_list <- movie_list %>%
mutate(duration_numeric = sapply(movie_list$duration, convert_duration))
# correlation between numeric Duration and Ratings
correlation_duration_rating <- cor(movie_list$duration_numeric, movie_list$rating, use = "complete.obs")
print(correlation_duration_rating)
